#!/bin/bash

# Check the platform.
if [ "$(uname)" != "Darwin" ]; then
	echo "This script is for Mac only."
	exit 1
fi

# Create utility functions.
getfullpath() {
	python -c 'import os,sys;print(os.path.realpath(sys.argv[1]))' "$1"
}
fail() {
	echo -e "\033[0;31m$1\033[0m"
	exit 1
}
cannot() {
	[ $? -eq 0 ] || fail "Cannot $1."
}
usage() {
	echo "usage: $0 [-m manifest-file] [-f front-end-directory] [-b back-end-file]"
	[ "$1" = "-h" -o "$1" = "--help" ] && exit 0 || exit 2
}

# Run the configuration script first.
D=$(dirname "$0")
"$D/configure" - || exit 1

# Collect command line parameters or provide defaults.
D=$(getfullpath "$D"/..)
P=$(getfullpath "$D"/..)
if [ $# -eq 0 ]; then
	MANIFEST_FILE="$P/panel.json"
	FRONTEND_DIRECTORY="$P/my-extension"
	BACKEND_FILE="$P/my-extension/services/backend.js"
else
	while [ $# -gt 0 ]; do
		if [ "$1" = "-b" ]; then
			BACKEND_FILE="$2";
			[ -s "$BACKEND_FILE" ] || cannot "open back-end file '$BACKEND_FILE'"
			BACKEND_FILE=$(getfullpath "$2");
			shift
		elif [ "$1" = "-f" ]; then
			FRONTEND_DIRECTORY="$2";
			[ -d "$FRONTEND_DIRECTORY" ] || cannot "open front-end directory '$FRONTEND_DIRECTORY'"
			FRONTEND_DIRECTORY=$(getfullpath "$2");
			shift
		elif [ "$1" = "-m" ]; then
			MANIFEST_FILE="$2";
			[ -s "$MANIFEST_FILE" ] || cannot "open manifest file '$MANIFEST_FILE'"
			MANIFEST_FILE=$(getfullpath "$2");
			shift
		else
			usage "$1"
		fi
		shift
	done
fi

# For the "hello world" extension, ensure service of the correct directory.
[ -n "$FRONTEND_DIRECTORY" -a -d "$FRONTEND_DIRECTORY/public" ] && FRONTEND_DIRECTORY="$FRONTEND_DIRECTORY/public"

# If necessary, create a panel extension manifest file.
cd "$D"
[ -n "$MANIFEST_FILE" ] || MANIFEST_FILE="$P/panel.json"
if [ -s "$MANIFEST_FILE" ]; then
	echo "Using extension manifest in '$MANIFEST_FILE'."
else
	echo "Creating and using panel extension manifest in '$MANIFEST_FILE'."
	yarn create-manifest -t panel -o "$MANIFEST_FILE"
fi

# Start new processes for the different aspects of running the Developer Rig.
NPROCESSES=0
if [ -z "$FRONTEND_DIRECTORY" ]; then
	echo "Front-end hosting is not being provided by the Developer Rig."
else
	echo "Hosting front-end in '$FRONTEND_DIRECTORY'."
	yarn host -d "$FRONTEND_DIRECTORY" -p 8080 -l &
	NPROCESSES=$(expr $NPROCESSES + 1)
fi
if [ -z "$BACKEND_FILE" ]; then
	echo "Back-end hosting is not being provided by the Developer Rig."
else
	echo "Hosting back-end in '$BACKEND_FILE'."
	node "$BACKEND_FILE" -l "$MANIFEST_FILE" &
	NPROCESSES=$(expr $NPROCESSES + 1)
fi
[ $NPROCESSES -gt 1 ] && ES=es
[ $NPROCESSES -gt 0 ] && echo "Started $NPROCESSES other process$ES to run the Developer Rig."
yarn start -l "$MANIFEST_FILE"
